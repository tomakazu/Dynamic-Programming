long long helper(int like[][MAXN],int n,int p,int mask,int *dp){
    
    long long ways = 0;
    if(p>=n){
        return 1;
    }
    if(dp[mask]!=0){
        return dp[mask];
    }
    for(int i=0;i<n;i++){
        if(like[p][i]==0)
            continue;
        if(!(mask&(1<<i))){
            ways += helper(like,n,p+1,mask|(1<<i),dp);    
        }
        
    }
    dp[mask] = ways;
    return ways;
}
long long solve(int like[][MAXN],int N)
{
	// Write your code here.
    int *dp = new int[1<<N]();
    for(int i=0;i<1<<N;i++){
        dp[i] = 0;
    }
    long long ans = helper(like,N,0,0,dp);
    return ans;
}
